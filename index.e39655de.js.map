{"mappings":"4vBAAA,IAAAA,EAAAC,EAAA,SACA,IAAIC,SAAEC,EAAQC,IAAEC,EAAGC,KAAEC,GAASP,EAAAQ,OAAOC,OAE9B,MAAMC,EAAiBC,SAASC,cAAc,eACxCC,EAAWF,SAASC,cAAc,WAqB/CE,eAAeC,EAAUC,GACvB,IAKE,aAxBJF,iBACE,MAAMG,QAAYC,MAChB,yDAAyDb,KAG3D,aADmBY,EAAIE,QACXC,M,CAeYC,IAEnBC,QAAOC,GAASP,EAAUQ,SAASD,EAAME,MACzCC,KAAIH,GAASA,EAAMI,M,CAEtB,MAAOC,GACPC,QAAQC,IAAIF,E,EAKT,SAASG,IACd,KAvBKjB,iBACL,MAAMG,QAAYC,MAChB,GAAGlB,EAAAgC,uCAAuC3B,cAAgBF,UAAiBI,KAG7E,aADmBU,EAAIE,M,EAoBrBc,GAAgBC,MAAKC,IACnBC,EAAYD,EAAIE,SAAS,EAAK,G,CAEhC,MAAOT,GACPC,QAAQC,IAAIF,E,EAKT,SAASQ,EAAYE,EAAQC,GAClCD,EACGZ,KACCZ,OAAOW,GACLA,EAAEe,WACFA,EAAUC,YACVA,EAAWC,eACXA,EAAcC,MACdA,EAAKC,aACLA,EAAYC,SACZA,EAAQ7B,UACRA,EAAS8B,aACTA,EAAYC,WACZA,MAEA,IAAIC,EAAW,GACfnC,EAASoC,UAAUC,OAAO,aAC1B,IAAIC,EAAc,mCAAmCV,IAGrD,GAFgB,OAAhBA,IAAuBU,EAAc,kDAErB,IAAZZ,EAAkB,CACpB,IAAInB,QAAeL,EAAUC,GACzBoC,EAAOR,EAAaS,MAAM,KAE9BL,EAAW,sDAC8BvB,sCAClB0B,6FACmCX,EAAWc,QAAQ,gDAC7CH,WAAqBN,gJAEQH,MAAmBC,4HAErCvB,EAAOmC,KAAK,UAAUnC,EAAOmC,KAAK,4BAA4BH,EAAK,OAAOA,EAAK,gIAE1DL,MAAeD,EAAaQ,QAAQ,+L,MAQpGN,EAAW,sDAC8BvB,sCAClB0B,6FACmCX,+CAC1BW,WAAqBN,gJAEQH,MAAmBC,4HAErC3B,MAAcA,wBAAgC4B,MAAiBA,+HAE1CG,MAAeD,+LASjFU,YAAW,KACT3C,EAASoC,UAAUQ,IAAI,aACvB/C,EAAegD,mBAAmB,aAAcV,EAAS,GACxD,IAAI,IAIVO,KAAK,G,CAiBV5C,SAASgD,iBAAiB,mBAAoB5B,GAC9CpB,SAASgD,iBAAiB,oBAd1B,WACE,IAAIC,EAAYC,aAAaC,QAAQ,aACjCC,EAAYF,aAAaC,QAAQ,aAEnB,OAAdF,GACFC,aAAaG,QAAQ,YAAa,MAGlB,OAAdD,GACFF,aAAaG,QAAQ,YAAa,K,qIClI/B,MAAMC,EAAW,+BAGXC,EAAS,CAClBzD,OAAQ,CACJL,IAJQ,mCAKR+D,MAAO,GACPC,eAAe,EACflE,SAAU,QACVmE,qBAAsB,GACtB/D,KAAM,EACNgE,OAAQ,GACRlB,KAAM,I","sources":["src/index.js","src/themoviedb-api.js"],"sourcesContent":["import { BASE_URL, params } from './themoviedb-api.js';\nlet { language, key, page } = params.option;\n\nexport const movieGalleryEl = document.querySelector('.movie-list');\nexport const loaderEl = document.querySelector(\".loader\");\n\n// fetch the genre list\nasync function fetchGenres() {\n  const res = await fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${key}`\n  );\n  const data = await res.json();\n  return data.genres;\n}\n\n// fetch trending movies\nexport async function fetchTrending() {\n  const res = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${key}&language=${language}&page=${page}`\n  );\n  const data = await res.json();\n  return data;\n}\n\n// get the genre value from genre_ids\nasync function getGenres(genre_ids) {\n  try {\n    let allGenres = await fetchGenres();\n    let matchingGenres = allGenres\n      .filter(genre => genre_ids.includes(genre.id))\n      .map(genre => genre.name);\n    return matchingGenres;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// Display the movies that were fetch and create movie cards\nexport function displayMovies() {\n  try {\n    fetchTrending().then(val => {\n      createCards(val.results, true);\n    });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// Function that creates Cards has two parameters data and boolean, true if the data came from api, false if it were fetched from local storage\nexport function createCards(movies, boolean) {\n  movies\n    .map(\n      async ({\n        id,\n        popularity,\n        poster_path,\n        original_title,\n        title,\n        release_date,\n        overview,\n        genre_ids,\n        vote_average,\n        vote_count,\n      }) => {\n        let moviesEl = \"\";\n        loaderEl.classList.remove(\"is-hidden\");\n        let poster_link = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n        poster_path === null ? poster_link = \"https://fakeimg.pl/300x450?text=Movie%20Image\" : poster_link;\n\n        if (boolean === true) {\n          let genres = await getGenres(genre_ids);\n          let year = release_date.split('-');\n          \n          moviesEl = `\n                  <li class=\"movie-item\" data-id=${id}>\n                      <a href=\"${poster_link}\" class=\"movie-link\">\n                          <div class=\"movie-card\" data-popularity=${popularity.toFixed(1)}>\n                              <img src=\"${poster_link}\" alt=\"${overview}\">\n                              <div class=\"movie-details-wrapper\">\n                                  <p class=\"movie-title\" data-title=\"${original_title}\">${title}</p>\n                                  <div class=\"movie-details\">\n                                    <p data-genre=\"${genres.join(\", \")}\">${genres.join(\", \")} | <span data-year=\"${year[0]}\">${year[0]}</span>\n                                    </p>\n                                    <p class=\"movie-rating\" data-count=\"${vote_count}\">${vote_average.toFixed(1)}</p>\n                                  </div>\n                              </div>\n                          </div>\n                      </a>\n                  </li>\n              `;\n        } else {\n          moviesEl = `\n                  <li class=\"movie-item\" data-id=${id}>\n                      <a href=\"${poster_link}\" class=\"movie-link\">\n                          <div class=\"movie-card\" data-popularity=${popularity}>\n                              <img src=\"${poster_link}\" alt=\"${overview}\">\n                              <div class=\"movie-details-wrapper\">\n                                  <p class=\"movie-title\" data-title=\"${original_title}\">${title}</p>\n                                  <div class=\"movie-details\">\n                                    <p data-genre=\"${genre_ids}\">${genre_ids} | <span data-year=\"${release_date}\">${release_date}</span>\n                                    </p>\n                                    <p class=\"movie-rating\" data-count=\"${vote_count}\">${vote_average}</p>\n                                  </div>\n                              </div>\n                          </div>\n                      </a>\n                  </li>\n              `;\n        }\n\n        setTimeout(() => { \n          loaderEl.classList.add(\"is-hidden\")\n          movieGalleryEl.insertAdjacentHTML('afterbegin', moviesEl);\n        }, 700);\n  \n      }\n    )\n    .join('');\n}\n\n// A function that creates a quasi-database for movies\nfunction localSetter() {\n  let watchlist = localStorage.getItem(\"watchList\");\n  let queuelist = localStorage.getItem(\"queueList\");\n  \n  if (watchlist === null) {\n    localStorage.setItem(\"watchList\", \"[]\");\n    \n  }\n  if (queuelist === null) {\n    localStorage.setItem(\"queueList\", \"[]\");    \n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', displayMovies);\ndocument.addEventListener('DOMContentLoaded', localSetter);\n","export const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"334986b59c344f376defb99ce94fed26\";\n\nexport const params = {\n    option: {\n        key: API_KEY,\n        query: \"\",\n        include_adult: false,\n        language: \"en-US\",\n        primary_release_year: \"\",\n        page: 1,\n        region: \"\",\n        year: \"\",\n    }\n}\n\n"],"names":["$9hI1i","parcelRequire","language","$1f0dc3b9307be026$var$language","key","$1f0dc3b9307be026$var$key","page","$1f0dc3b9307be026$var$page","params","option","$1f0dc3b9307be026$export$9b265f73751dc3d0","document","querySelector","$1f0dc3b9307be026$export$b8f00f64ee8bcde3","async","$1f0dc3b9307be026$var$getGenres","genre_ids","res","fetch","json","genres","$1f0dc3b9307be026$var$fetchGenres","filter","genre","includes","id","map","name","e","console","log","$1f0dc3b9307be026$export$80c33a899040816b","BASE_URL","$1f0dc3b9307be026$export$366c886a9138e8db","then","val","$1f0dc3b9307be026$export$659b6b545718ce73","results","movies","boolean","popularity","poster_path","original_title","title","release_date","overview","vote_average","vote_count","moviesEl","classList","remove","poster_link","year","split","toFixed","join","setTimeout","add","insertAdjacentHTML","addEventListener","watchlist","localStorage","getItem","queuelist","setItem","$6c27d9004ed79223$export$ca6dda5263526f75","$6c27d9004ed79223$export$281ad3752a540efe","query","include_adult","primary_release_year","region"],"version":3,"file":"index.e39655de.js.map"}