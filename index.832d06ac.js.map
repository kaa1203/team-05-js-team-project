{"mappings":"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","sources":["src/pagination.js"],"sourcesContent":["import { BASE_URL, params } from './themoviedb-api.js';\nconst { language, key } = params.option;\n\nconst movieGalleryEl = document.querySelector('.movie-list');\nconst paginationContainer = document.getElementById('pagination-links');\nconst prevButton = document.getElementById('prev');\nconst nextButton = document.getElementById('next');\n\nlet totalPages = 20;\nlet currentPage = 1;\nconst pageSize = 50;\n\n\nasync function fetchGenreData() {\n  try {\n    const response = await fetch(\n      `${apiUrl}/genre/movie/list?language=en-US&api_key=${apiKey}`\n    );\n    const data = await response.json();\n    console.log(data);\n    genreMap = {};\n    data.genres.forEach(genre => {\n      genreMap[genre.id] = genre.name;\n    });\n    fetchMovieData(1);\n  } catch (error) {\n    console.error('Error fetching genre data:', error);\n  }\n}\n\nasync function fetchMoviesByPage(page, pageSize) {\n  try {\n    const res = await fetch(\n      `${BASE_URL}/trending/movie/day?api_key=${key}&language=${language}&page=${page}&page_size=${pageSize}`\n    );\n    const data = await response.json();\n    movieData = data.results.map(movie => ({\n      title: movie.title,\n      poster_path: movie.poster_path,\n      genre: movie.genre_ids.map(id => genreMap[id]),\n      year: movie.release_date\n        ? new Date(movie.release_date).getFullYear()\n        : 'N/A',\n    }));\n    displayList(movieData, list, itemsPerPage, 1);\n    setupPagination(movieData, paginationLinksWrapper, itemsPerPage);\n  } catch (error) {\n    console.error(`Error fetching movies for page ${page}:`, error);\n    throw error;\n  }\n}\n\nasync function fetchAndDisplayMovies() {\n  try {\n    const moviesData = await fetchMoviesByPage(\n      currentPage,\n      currentPage === 1 ? 20 : pageSize\n    );\n    totalPages = moviesData.total_pages; // Update total pages based on API response\n    createCards(moviesData.results);\n    generatePaginationLinks();\n  } catch (error) {\n    console.error('Error fetching or displaying movies:', error);\n  }\n}\n\nasync function getGenres(genre_ids) {\n  try {\n    const allGenres = await fetchGenres();\n    const matchingGenres = allGenres\n      .filter(genre => genre_ids.includes(genre.id))\n      .map(genre => genre.name);\n    return matchingGenres;\n  } catch (error) {\n    console.error('Error getting genres:', error);\n    throw error;\n  }\n}\n\nasync function createCards(movies) {\n  movieGalleryEl.innerHTML = '';\n  for (const movie of movies) {\n    const {\n      id,\n      popularity,\n      poster_path,\n      original_title,\n      title,\n      release_date,\n      overview,\n      genre_ids,\n      vote_average,\n      vote_count,\n    } = movie;\n\n    try {\n      const genres = await getGenres(genre_ids);\n      const year = release_date.split('-');\n      const movieEl = `\n        <li class=\"movie-item\" data-id=${id}>\n          <a href=\"https://image.tmdb.org/t/p/w500/${poster_path}\" class=\"movie-link\">\n            <div class=\"movie-card\" data-popularity=${popularity.toFixed(1)}>\n              <img src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"${overview}\">\n              <div class=\"movie-details\">\n                <p class=\"movie-title\" data-title=\"${original_title}\">${title}</p>\n                <span>${genres.map(genre => ` ${genre}`)}</span>\n                <span data-year=\"${year[0]}\">| ${year[0]}</span>\n                <p data-count=\"${vote_count}\">${vote_average.toFixed(1)}</p>\n              </div>\n            </div>\n          </a>\n        </li>\n      `;\n      movieGalleryEl.insertAdjacentHTML('afterbegin', movieEl);\n    } catch (error) {\n      console.error('Error creating movie cards:', error);\n    }\n  }\n}\n\nfunction generatePaginationLinks() {\n  paginationContainer.innerHTML = '';\n  const startPage = Math.max(1, Math.min(currentPage - 4, totalPages - 9)); // Adjusted start page logic\n  const endPage = Math.min(startPage + 9, totalPages);\n\n  for (let i = startPage; i <= endPage; i++) {\n    console.error('Error fetching movie data:', error);\n  }\n}\n\nfunction displayList(items, wrapper, itemsPerPage, page) {\n  wrapper.innerHTML = '';\n  page--;\n\n  const start = itemsPerPage * page;\n  const end = start + itemsPerPage;\n  const paginatedItems = items.slice(start, end);\n\n  for (let i = 0; i < paginatedItems.length; i++) {\n    const item = paginatedItems[i];\n    const li = document.createElement('li');\n\n    const img = document.createElement('img');\n    img.src = imageBaseUrl + item.poster_path;\n    img.alt = item.title;\n    img.style.borderRadius = '5px';\n    li.appendChild(img);\n\n    const titleDiv = document.createElement('div');\n    titleDiv.textContent = item.title;\n    li.appendChild(titleDiv);\n\n    const flexContainer = document.createElement('div');\n    flexContainer.style.display = 'flex';\n\n    const genreDiv = document.createElement('div');\n    genreDiv.textContent = item.genre.join(', ');\n    genreDiv.style.color = '#ff6b08';\n    flexContainer.appendChild(genreDiv);\n\n    const pipeSpan = document.createElement('span');\n    pipeSpan.textContent = ' | ';\n    pipeSpan.style.color = '#ff6b08';\n    flexContainer.appendChild(pipeSpan);\n\n    const yearDiv = document.createElement('div');\n    yearDiv.textContent = item.year;\n    yearDiv.style.color = '#ff6b08';\n    flexContainer.appendChild(yearDiv);\n\n    li.appendChild(flexContainer);\n\n    wrapper.appendChild(li);\n  }\n}\n\nfunction setupPagination(items, wrapper, itemsPerPage) {\n  wrapper.innerHTML = '';\n\n  const pageCount = Math.ceil(items.length / itemsPerPage);\n\n  for (let i = 1; i <= pageCount; i++) {\n    if (i === currentPage) {\n      link.classList.add('active');\n    }\n\n    link.addEventListener('click', function (event) {\n      event.preventDefault();\n      currentPage = parseInt(this.textContent);\n      fetchAndDisplayMovies();\n    });\n    paginationContainer.appendChild(link);\n  }\n}\n\nprevButton.addEventListener('click', function () {\n  if (currentPage > 10) {\n    currentPage -= 10; // Decrease by 10 to skip to the previous group of ten\n  } else {\n    currentPage = 1;\n  }\n  fetchAndDisplayMovies();\n});\n\nnextButton.addEventListener('click', function () {\n  if (currentPage + 10 <= totalPages) {\n    currentPage += 10; // Increase by 10 to skip to the next group of ten\n  } else {\n    currentPage = totalPages;\n  }\n  fetchAndDisplayMovies();\n});\n\nwindow.addEventListener('DOMContentLoaded', fetchAndDisplayMovies);\n\nfunction localSetter() {\n  let watchlist = localStorage.getItem('watchList');\n  let queuelist = localStorage.getItem('queueList');\n\n  if (watchlist === null || watchlist.length === 0) {\n    localStorage.setItem('watchList', '[]');\n  }\n  if (queuelist === null || watchlist.length === 0) {\n    localStorage.setItem('queueList', '[]');\n  }\n}\n\nlocalSetter();\n\n// Ensure active class on the first link when page loads\ngeneratePaginationLinks();\n"],"names":["$9hI1i","parcelRequire","language","$a593388852b485da$var$language","key","$a593388852b485da$var$key","params","option","$a593388852b485da$var$movieGalleryEl","document","querySelector","$a593388852b485da$var$paginationContainer","getElementById","$a593388852b485da$var$prevButton","$a593388852b485da$var$nextButton","$a593388852b485da$var$totalPages","$a593388852b485da$var$currentPage","async","$a593388852b485da$var$fetchMoviesByPage","page","pageSize1","fetch","BASE_URL","data","response","json","movieData","results","map","movie","title","poster_path","genre","genre_ids","id","genreMap","year","release_date","Date","getFullYear","items","wrapper","itemsPerPage","innerHTML","start","end","paginatedItems","slice","i","length","item","li","createElement","img","src","imageBaseUrl","alt","style","borderRadius","appendChild","titleDiv","textContent","flexContainer","display","genreDiv","join","color","pipeSpan","yearDiv","$a593388852b485da$var$displayList","list","pageCount","Math","ceil","link","classList","add","addEventListener","event","preventDefault","parseInt","this","$a593388852b485da$var$fetchAndDisplayMovies","$a593388852b485da$var$setupPagination","paginationLinksWrapper","error","console","moviesData","total_pages","movies","popularity","original_title","overview","vote_average","vote_count","genres","$a593388852b485da$var$getGenres","split","movieEl","toFixed","insertAdjacentHTML","$a593388852b485da$var$createCards","$a593388852b485da$var$generatePaginationLinks","allGenres","fetchGenres","filter","includes","name","startPage","max","min","endPage","window","watchlist","localStorage","getItem","queuelist","setItem","$a593388852b485da$var$localSetter"],"version":3,"file":"index.832d06ac.js.map"}