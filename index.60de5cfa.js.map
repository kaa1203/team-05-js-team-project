{"mappings":"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","sources":["src/pagination.js"],"sourcesContent":["const apiKey = '9328d3a7c91170c633dca58cd1763346';\nconst apiUrl = 'https://api.themoviedb.org/3';\nconst imageBaseUrl = 'https://image.tmdb.org/t/p/w342';\nconsole.log(apiUrl);\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5MzI4ZDNhN2M5MTE3MGM2MzNkY2E1OGNkMTc2MzM0NiIsInN1YiI6IjY2MTAwYmM0M2U2ZjJiMDEzMTM4OTVhNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.qexB_iqBS_60mzYwyATEfpKtUXCi2HtfdoouqNQvyts`,\n  },\n};\n\nconst itemsPerPage = 10;\nlet movieData = [];\nlet genreMap = {};\n\nconst list = document.getElementById('list');\nconst paginationLinksWrapper = document.getElementById('pagination-links');\nconst prevButton = document.getElementById('prev');\nconst nextButton = document.getElementById('next');\n\nasync function fetchGenreData() {\n  try {\n    const response = await fetch(\n      `${apiUrl}/genre/movie/list?language=en-US&api_key=${apiKey}`\n    );\n    const data = await response.json();\n    console.log(data);\n    genreMap = {};\n    data.genres.forEach(genre => {\n      genreMap[genre.id] = genre.name;\n    });\n    fetchMovieData(1);\n  } catch (error) {\n    console.error('Error fetching genre data:', error);\n  }\n}\n\nasync function fetchMovieData(pageNumber) {\n  try {\n    const response = await fetch(\n      `${apiUrl}/trending/all/day?language=en-US&page=${pageNumber}&api_key=${apiKey}`,\n      options\n    );\n    const data = await response.json();\n    movieData = data.results.map(movie => ({\n      title: movie.title,\n      poster_path: movie.poster_path,\n      genre: movie.genre_ids.map(id => genreMap[id]),\n      year: movie.release_date\n        ? new Date(movie.release_date).getFullYear()\n        : 'N/A',\n    }));\n    displayList(movieData, list, itemsPerPage, 1);\n    setupPagination(movieData, paginationLinksWrapper, itemsPerPage);\n  } catch (error) {\n    console.error('Error fetching movie data:', error);\n  }\n}\n\nfunction displayList(items, wrapper, itemsPerPage, page) {\n  wrapper.innerHTML = '';\n  page--;\n\n  const start = itemsPerPage * page;\n  const end = start + itemsPerPage;\n  const paginatedItems = items.slice(start, end);\n\n  for (let i = 0; i < paginatedItems.length; i++) {\n    const item = paginatedItems[i];\n    const li = document.createElement('li');\n\n    const img = document.createElement('img');\n    img.src = imageBaseUrl + item.poster_path;\n    img.alt = item.title;\n    img.style.borderRadius = '5px';\n    li.appendChild(img);\n\n    const titleDiv = document.createElement('div');\n    titleDiv.textContent = item.title;\n    li.appendChild(titleDiv);\n\n    const flexContainer = document.createElement('div');\n    flexContainer.style.display = 'flex';\n\n    const genreDiv = document.createElement('div');\n    genreDiv.textContent = item.genre.join(', ');\n    genreDiv.style.color = '#ff6b08';\n    flexContainer.appendChild(genreDiv);\n\n    const pipeSpan = document.createElement('span');\n    pipeSpan.textContent = ' | ';\n    pipeSpan.style.color = '#ff6b08';\n    flexContainer.appendChild(pipeSpan);\n\n    const yearDiv = document.createElement('div');\n    yearDiv.textContent = item.year;\n    yearDiv.style.color = '#ff6b08';\n    flexContainer.appendChild(yearDiv);\n\n    li.appendChild(flexContainer);\n\n    wrapper.appendChild(li);\n  }\n}\n\nfunction setupPagination(items, wrapper, itemsPerPage) {\n  wrapper.innerHTML = '';\n\n  const pageCount = Math.ceil(items.length / itemsPerPage);\n\n  for (let i = 1; i <= pageCount; i++) {\n    const link = document.createElement('a');\n    link.href = '#';\n    link.textContent = i;\n\n    link.addEventListener('click', function (event) {\n      event.preventDefault();\n\n      displayList(items, list, itemsPerPage, i);\n\n      const paginationLinks = document.querySelectorAll('.pagination-link');\n      paginationLinks.forEach(link => link.classList.remove('active'));\n\n      this.parentNode.classList.add('active');\n    });\n\n    const listItem = document.createElement('div');\n    listItem.classList.add('pagination-link');\n    if (i === 1) {\n      listItem.classList.add('active');\n    }\n    listItem.appendChild(link);\n    wrapper.appendChild(listItem);\n  }\n}\n\nprevButton.addEventListener('click', function () {\n  const activeIndex = document.querySelector(\n    '.pagination-link.active a'\n  ).textContent;\n  const prevIndex = parseInt(activeIndex) - 1;\n  if (prevIndex > 0) {\n    document\n      .querySelector('.pagination-link.active')\n      .classList.remove('active');\n    displayList(movieData, list, itemsPerPage, prevIndex);\n    paginationLinksWrapper.children[prevIndex - 1].classList.add('active');\n  }\n});\n\nnextButton.addEventListener('click', function () {\n  const activeIndex = document.querySelector(\n    '.pagination-link.active a'\n  ).textContent;\n  const nextIndex = parseInt(activeIndex) + 1;\n  const pageCount = Math.ceil(movieData.length / itemsPerPage);\n  if (nextIndex <= pageCount) {\n    document\n      .querySelector('.pagination-link.active')\n      .classList.remove('active');\n    displayList(movieData, list, itemsPerPage, nextIndex);\n    paginationLinksWrapper.children[nextIndex - 1].classList.add('active');\n  }\n});\n\nfetchGenreData();\n"],"names":["console","log","$a593388852b485da$var$options","method","headers","accept","Authorization","$a593388852b485da$var$movieData","$a593388852b485da$var$genreMap","$a593388852b485da$var$list","document","getElementById","$a593388852b485da$var$paginationLinksWrapper","$a593388852b485da$var$prevButton","$a593388852b485da$var$nextButton","$a593388852b485da$var$displayList","items","wrapper","itemsPerPage1","page","innerHTML","start","end","paginatedItems","slice","i","length","item","li","createElement","img","src","poster_path","alt","title","style","borderRadius","appendChild","titleDiv","textContent","flexContainer","display","genreDiv","genre","join","color","pipeSpan","yearDiv","year","addEventListener","activeIndex","querySelector","prevIndex","parseInt","classList","remove","children","add","nextIndex","Math","ceil","async","response","fetch","data","json","genres","forEach","id","name","pageNumber","results","map","movie","genre_ids","release_date","Date","getFullYear","itemsPerPage2","pageCount","link1","href","event","preventDefault","querySelectorAll","link","this","parentNode","listItem","$a593388852b485da$var$setupPagination","error","$a593388852b485da$var$fetchMovieData","$a593388852b485da$var$fetchGenreData"],"version":3,"file":"index.60de5cfa.js.map"}