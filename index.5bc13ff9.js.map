{"mappings":"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","sources":["src/pagination.js"],"sourcesContent":["import { BASE_URL, params } from './themoviedb-api.js';\nconst { language, key } = params.option;\n\nconst movieGalleryEl = document.querySelector('.movie-list');\nconst paginationContainer = document.getElementById('pagination-links');\nconst prevButton = document.getElementById('prev');\nconst nextButton = document.getElementById('next');\n\nlet totalPages = 20;\nlet currentPage = 1;\nconst pageSize = 50;\n\n\nasync function fetchGenreData() {\n  try {\n    const response = await fetch(\n      `${apiUrl}/genre/movie/list?language=en-US&api_key=${apiKey}`\n    );\n    const data = await response.json();\n    console.log(data);\n    genreMap = {};\n    data.genres.forEach(genre => {\n      genreMap[genre.id] = genre.name;\n    });\n    fetchMovieData(1);\n  } catch (error) {\n    console.error('Error fetching genre data:', error);\n  }\n}\n\nasync function fetchMoviesByPage(page, pageSize) {\n  try {\n    const res = await fetch(\n      `${BASE_URL}/trending/movie/day?api_key=${key}&language=${language}&page=${page}&page_size=${pageSize}`\n    );\n    const data = await response.json();\n    movieData = data.results.map(movie => ({\n      title: movie.title,\n      poster_path: movie.poster_path,\n      genre: movie.genre_ids.map(id => genreMap[id]),\n      year: movie.release_date\n        ? new Date(movie.release_date).getFullYear()\n        : 'N/A',\n    }));\n    displayList(movieData, list, itemsPerPage, 1);\n    setupPagination(movieData, paginationLinksWrapper, itemsPerPage);\n  } catch (error) {\n    console.error(`Error fetching movies for page ${page}:`, error);\n    throw error;\n  }\n}\n\nasync function fetchAndDisplayMovies() {\n  try {\n    const moviesData = await fetchMoviesByPage(\n      currentPage,\n      currentPage === 1 ? 20 : pageSize\n    );\n    totalPages = moviesData.total_pages; // Update total pages based on API response\n    createCards(moviesData.results);\n    generatePaginationLinks();\n  } catch (error) {\n    console.error('Error fetching or displaying movies:', error);\n  }\n}\n\nasync function getGenres(genre_ids) {\n  try {\n    const allGenres = await fetchGenres();\n    const matchingGenres = allGenres\n      .filter(genre => genre_ids.includes(genre.id))\n      .map(genre => genre.name);\n    return matchingGenres;\n  } catch (error) {\n    console.error('Error getting genres:', error);\n    throw error;\n  }\n}\n\nasync function createCards(movies) {\n  movieGalleryEl.innerHTML = '';\n  for (const movie of movies) {\n    const {\n      id,\n      popularity,\n      poster_path,\n      original_title,\n      title,\n      release_date,\n      overview,\n      genre_ids,\n      vote_average,\n      vote_count,\n    } = movie;\n\n    try {\n      const genres = await getGenres(genre_ids);\n      const year = release_date.split('-');\n      const movieEl = `\n        <li class=\"movie-item\" data-id=${id}>\n          <a href=\"https://image.tmdb.org/t/p/w500/${poster_path}\" class=\"movie-link\">\n            <div class=\"movie-card\" data-popularity=${popularity.toFixed(1)}>\n              <img src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"${overview}\">\n              <div class=\"movie-details\">\n                <p class=\"movie-title\" data-title=\"${original_title}\">${title}</p>\n                <span>${genres.map(genre => ` ${genre}`)}</span>\n                <span data-year=\"${year[0]}\">| ${year[0]}</span>\n                <p data-count=\"${vote_count}\">${vote_average.toFixed(1)}</p>\n              </div>\n            </div>\n          </a>\n        </li>\n      `;\n      movieGalleryEl.insertAdjacentHTML('afterbegin', movieEl);\n    } catch (error) {\n      console.error('Error creating movie cards:', error);\n    }\n  }\n}\n\nfunction generatePaginationLinks() {\n  paginationContainer.innerHTML = '';\n  const startPage = Math.max(1, Math.min(currentPage - 4, totalPages - 9)); // Adjusted start page logic\n  const endPage = Math.min(startPage + 9, totalPages);\n\n  for (let i = startPage; i <= endPage; i++) {\n    console.error('Error fetching movie data:', error);\n  }\n}\n\nfunction displayList(items, wrapper, itemsPerPage, page) {\n  wrapper.innerHTML = '';\n  page--;\n\n  const start = itemsPerPage * page;\n  const end = start + itemsPerPage;\n  const paginatedItems = items.slice(start, end);\n\n  for (let i = 0; i < paginatedItems.length; i++) {\n    const item = paginatedItems[i];\n    const li = document.createElement('li');\n\n    const img = document.createElement('img');\n    img.src = imageBaseUrl + item.poster_path;\n    img.alt = item.title;\n    img.style.borderRadius = '5px';\n    li.appendChild(img);\n\n    const titleDiv = document.createElement('div');\n    titleDiv.textContent = item.title;\n    li.appendChild(titleDiv);\n\n    const flexContainer = document.createElement('div');\n    flexContainer.style.display = 'flex';\n\n    const genreDiv = document.createElement('div');\n    genreDiv.textContent = item.genre.join(', ');\n    genreDiv.style.color = '#ff6b08';\n    flexContainer.appendChild(genreDiv);\n\n    const pipeSpan = document.createElement('span');\n    pipeSpan.textContent = ' | ';\n    pipeSpan.style.color = '#ff6b08';\n    flexContainer.appendChild(pipeSpan);\n\n    const yearDiv = document.createElement('div');\n    yearDiv.textContent = item.year;\n    yearDiv.style.color = '#ff6b08';\n    flexContainer.appendChild(yearDiv);\n\n    li.appendChild(flexContainer);\n\n    wrapper.appendChild(li);\n  }\n}\n\nfunction setupPagination(items, wrapper, itemsPerPage) {\n  wrapper.innerHTML = '';\n\n  const pageCount = Math.ceil(items.length / itemsPerPage);\n\n  for (let i = 1; i <= pageCount; i++) {\n    if (i === currentPage) {\n      link.classList.add('active');\n    }\n\n    link.addEventListener('click', function (event) {\n      event.preventDefault();\n      currentPage = parseInt(this.textContent);\n      fetchAndDisplayMovies();\n    });\n    paginationContainer.appendChild(link);\n  }\n}\n\nprevButton.addEventListener('click', function () {\n  if (currentPage > 10) {\n    currentPage -= 10; // Decrease by 10 to skip to the previous group of ten\n  } else {\n    currentPage = 1;\n  }\n  fetchAndDisplayMovies();\n});\n\nnextButton.addEventListener('click', function () {\n  if (currentPage + 10 <= totalPages) {\n    currentPage += 10; // Increase by 10 to skip to the next group of ten\n  } else {\n    currentPage = totalPages;\n  }\n  fetchAndDisplayMovies();\n});\n\nwindow.addEventListener('DOMContentLoaded', fetchAndDisplayMovies);\n\nfunction localSetter() {\n  let watchlist = localStorage.getItem('watchList');\n  let queuelist = localStorage.getItem('queueList');\n\n  if (watchlist === null || watchlist.length === 0) {\n    localStorage.setItem('watchList', '[]');\n  }\n  if (queuelist === null || watchlist.length === 0) {\n    localStorage.setItem('queueList', '[]');\n  }\n}\n\nlocalSetter();\n\n// Ensure active class on the first link when page loads\ngeneratePaginationLinks();\n"],"names":["watchlist","queuelist","$bpxeT","parcelRequire","$a05c08abba1959c4$var$_option","$7Omtz","params","option","$a05c08abba1959c4$var$language","language","$a05c08abba1959c4$var$key","key","$a05c08abba1959c4$var$movieGalleryEl","document","querySelector","$a05c08abba1959c4$var$paginationContainer","getElementById","$a05c08abba1959c4$var$prevButton","$a05c08abba1959c4$var$nextButton","$a05c08abba1959c4$var$totalPages","$a05c08abba1959c4$var$currentPage","$a05c08abba1959c4$var$fetchMoviesByPage","page","pageSize1","$a05c08abba1959c4$var$_fetchMoviesByPage","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","data","fetch","concat","BASE_URL","_ctx","sent","response","json","movieData","results","map","movie","title","poster_path","genre","genre_ids","id","genreMap","year","release_date","Date","getFullYear","$a05c08abba1959c4$var$displayList","list","itemsPerPage","$a05c08abba1959c4$var$setupPagination","paginationLinksWrapper","console","error","t0","$a05c08abba1959c4$var$fetchAndDisplayMovies","$a05c08abba1959c4$var$_fetchAndDisplayMovies","moviesData","total_pages","$a05c08abba1959c4$var$createCards","$a05c08abba1959c4$var$generatePaginationLinks","$a05c08abba1959c4$var$getGenres","$a05c08abba1959c4$var$_getGenres","allGenres","matchingGenres","fetchGenres","filter","includes","name","movies","$a05c08abba1959c4$var$_createCards","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","popularity","original_title","overview","vote_average","vote_count","genres","movieEl","innerHTML","undefined","Symbol","iterator","next","done","value","split","toFixed","insertAdjacentHTML","t1","return","startPage","Math","max","min","endPage","i","items","wrapper","start","end","paginatedItems","slice","length","item","li","createElement","img","src","imageBaseUrl","alt","style","borderRadius","appendChild","titleDiv","textContent","flexContainer","display","genreDiv","join","color","pipeSpan","yearDiv","pageCount","ceil","link","classList","add","addEventListener","event","preventDefault","parseInt","window","localStorage","getItem","setItem"],"version":3,"file":"index.5bc13ff9.js.map"}