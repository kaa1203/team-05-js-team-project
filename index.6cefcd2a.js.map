{"mappings":"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","sources":["src/pagination.js"],"sourcesContent":["const apiKey = '9328d3a7c91170c633dca58cd1763346';\nconst apiUrl = 'https://api.themoviedb.org/3';\nconst imageBaseUrl = 'https://image.tmdb.org/t/p/w342';\nconsole.log(apiUrl);\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5MzI4ZDNhN2M5MTE3MGM2MzNkY2E1OGNkMTc2MzM0NiIsInN1YiI6IjY2MTAwYmM0M2U2ZjJiMDEzMTM4OTVhNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.qexB_iqBS_60mzYwyATEfpKtUXCi2HtfdoouqNQvyts`,\n  },\n};\n\nconst itemsPerPage = 10;\nlet movieData = [];\nlet genreMap = {};\n\nconst list = document.getElementById('list');\nconst paginationLinksWrapper = document.getElementById('pagination-links');\nconst prevButton = document.getElementById('prev');\nconst nextButton = document.getElementById('next');\n\nasync function fetchGenreData() {\n  try {\n    const response = await fetch(\n      `${apiUrl}/genre/movie/list?language=en-US&api_key=${apiKey}`\n    );\n    const data = await response.json();\n    console.log(data);\n    genreMap = {};\n    data.genres.forEach(genre => {\n      genreMap[genre.id] = genre.name;\n    });\n    fetchMovieData(1);\n  } catch (error) {\n    console.error('Error fetching genre data:', error);\n  }\n}\n\nasync function fetchMovieData(pageNumber) {\n  try {\n    const response = await fetch(\n      `${apiUrl}/trending/all/day?language=en-US&page=${pageNumber}&api_key=${apiKey}`,\n      options\n    );\n    const data = await response.json();\n    movieData = data.results.map(movie => ({\n      title: movie.title,\n      poster_path: movie.poster_path,\n      genre: movie.genre_ids.map(id => genreMap[id]),\n      year: movie.release_date\n        ? new Date(movie.release_date).getFullYear()\n        : 'N/A',\n    }));\n    displayList(movieData, list, itemsPerPage, 1);\n    setupPagination(movieData, paginationLinksWrapper, itemsPerPage);\n  } catch (error) {\n    console.error('Error fetching movie data:', error);\n  }\n}\n\nfunction displayList(items, wrapper, itemsPerPage, page) {\n  wrapper.innerHTML = '';\n  page--;\n\n  const start = itemsPerPage * page;\n  const end = start + itemsPerPage;\n  const paginatedItems = items.slice(start, end);\n\n  for (let i = 0; i < paginatedItems.length; i++) {\n    const item = paginatedItems[i];\n    const li = document.createElement('li');\n\n    const img = document.createElement('img');\n    img.src = imageBaseUrl + item.poster_path;\n    img.alt = item.title;\n    img.style.borderRadius = '5px';\n    li.appendChild(img);\n\n    const titleDiv = document.createElement('div');\n    titleDiv.textContent = item.title;\n    li.appendChild(titleDiv);\n\n    const flexContainer = document.createElement('div');\n    flexContainer.style.display = 'flex';\n\n    const genreDiv = document.createElement('div');\n    genreDiv.textContent = item.genre.join(', ');\n    genreDiv.style.color = '#ff6b08';\n    flexContainer.appendChild(genreDiv);\n\n    const pipeSpan = document.createElement('span');\n    pipeSpan.textContent = ' | ';\n    pipeSpan.style.color = '#ff6b08';\n    flexContainer.appendChild(pipeSpan);\n\n    const yearDiv = document.createElement('div');\n    yearDiv.textContent = item.year;\n    yearDiv.style.color = '#ff6b08';\n    flexContainer.appendChild(yearDiv);\n\n    li.appendChild(flexContainer);\n\n    wrapper.appendChild(li);\n  }\n}\n\nfunction setupPagination(items, wrapper, itemsPerPage) {\n  wrapper.innerHTML = '';\n\n  const pageCount = Math.ceil(items.length / itemsPerPage);\n\n  for (let i = 1; i <= pageCount; i++) {\n    const link = document.createElement('a');\n    link.href = '#';\n    link.textContent = i;\n\n    link.addEventListener('click', function (event) {\n      event.preventDefault();\n\n      displayList(items, list, itemsPerPage, i);\n\n      const paginationLinks = document.querySelectorAll('.pagination-link');\n      paginationLinks.forEach(link => link.classList.remove('active'));\n\n      this.parentNode.classList.add('active');\n    });\n\n    const listItem = document.createElement('div');\n    listItem.classList.add('pagination-link');\n    if (i === 1) {\n      listItem.classList.add('active');\n    }\n    listItem.appendChild(link);\n    wrapper.appendChild(listItem);\n  }\n}\n\nprevButton.addEventListener('click', function () {\n  const activeIndex = document.querySelector(\n    '.pagination-link.active a'\n  ).textContent;\n  const prevIndex = parseInt(activeIndex) - 1;\n  if (prevIndex > 0) {\n    document\n      .querySelector('.pagination-link.active')\n      .classList.remove('active');\n    displayList(movieData, list, itemsPerPage, prevIndex);\n    paginationLinksWrapper.children[prevIndex - 1].classList.add('active');\n  }\n});\n\nnextButton.addEventListener('click', function () {\n  const activeIndex = document.querySelector(\n    '.pagination-link.active a'\n  ).textContent;\n  const nextIndex = parseInt(activeIndex) + 1;\n  const pageCount = Math.ceil(movieData.length / itemsPerPage);\n  if (nextIndex <= pageCount) {\n    document\n      .querySelector('.pagination-link.active')\n      .classList.remove('active');\n    displayList(movieData, list, itemsPerPage, nextIndex);\n    paginationLinksWrapper.children[nextIndex - 1].classList.add('active');\n  }\n});\n\nfetchGenreData();\n"],"names":["$bpxeT","parcelRequire","$a05c08abba1959c4$var$apiKey","$a05c08abba1959c4$var$apiUrl","console","log","$a05c08abba1959c4$var$options","method","headers","accept","Authorization","$a05c08abba1959c4$var$itemsPerPage","$a05c08abba1959c4$var$movieData","$a05c08abba1959c4$var$genreMap","$a05c08abba1959c4$var$list","document","getElementById","$a05c08abba1959c4$var$paginationLinksWrapper","$a05c08abba1959c4$var$prevButton","$a05c08abba1959c4$var$nextButton","$a05c08abba1959c4$var$_fetchGenreData","$parcel$interopDefault","$2TvXO","mark","_callee","response","data","fetch","concat","_ctx","sent","json","genres","forEach","genre","id","name","$a05c08abba1959c4$var$fetchMovieData","error","t0","apply","this","arguments","pageNumber","$a05c08abba1959c4$var$_fetchMovieData","$a05c08abba1959c4$var$displayList","results","map","movie","title","poster_path","genre_ids","year","release_date","Date","getFullYear","$a05c08abba1959c4$var$setupPagination","items","wrapper","itemsPerPage1","page","innerHTML","start","end","paginatedItems","slice","i","length","item","li","createElement","img","src","alt","style","borderRadius","appendChild","titleDiv","textContent","flexContainer","display","genreDiv","join","color","pipeSpan","yearDiv","itemsPerPage2","link1","href","addEventListener","event","preventDefault","querySelectorAll","link","classList","remove","parentNode","add","listItem","pageCount","Math","ceil","i1","_loop","activeIndex","querySelector","prevIndex","parseInt","children","nextIndex","$a05c08abba1959c4$var$fetchGenreData"],"version":3,"file":"index.6cefcd2a.js.map"}