{"mappings":"wsBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,SAAEC,EAAQC,IAAEC,GAAQL,EAAAM,OAAOC,OAEpBC,EAAiBC,SAASC,cAAc,eAkBrDC,eAAeC,EAAUC,GACvB,IAME,aAvBJF,iBACE,MAAMG,QAAYC,MAChB,yDAAyDV,KAG3D,aADmBS,EAAIE,QACXC,M,CAaYC,IAGnBC,QAAOC,GAASP,EAAUQ,SAASD,EAAME,MACzCC,KAAIH,GAASA,EAAMI,M,CAGtB,MAAOC,GACPC,QAAQC,IAAIF,E,EAcT,SAASG,EAAYC,EAAQC,GAClCD,EACGN,KACCZ,OAAOW,GACLA,EAAES,WACFA,EAAUC,YACVA,EAAWC,eACXA,EAAcC,MACdA,EAAKC,aACLA,EAAYC,SACZA,EAAQvB,UACRA,EAASwB,aACTA,EAAYC,WACZA,MAEA,IAAIC,EAAW,GACf,IAAgB,IAAZT,EAAkB,CACpB,IAAIb,QAAeL,EAAUC,GACzB2B,EAAOL,EAAaM,MAAM,KAE9BF,EAAW,sDAC8BjB,sEACcU,6FACGD,EAAWW,QAAQ,gFACbV,WAAqBI,gJAExBH,MAAmBC,4HAErCjB,EAAO0B,KAAK,UAAU1B,EAAO0B,KAAK,4BAA4BH,EAAK,OAAOA,EAAK,gIAE1DF,MAAeD,EAAaK,QAAQ,+L,MAQpGH,EAAW,sDAC8BjB,sEACcU,6FACGD,+EACMC,WAAqBI,gJAExBH,MAAmBC,gHAEjDrB,wBAAgCsB,MAAiBA,+HAEhBG,MAAeD,+LAQ/E7B,EAAeoC,mBAAmB,aAAcL,EAAS,IAG9DI,KAAK,G,EAGV,WACE,IAAIE,EAAYC,aAAaC,QAAQ,aACjCC,EAAYF,aAAaC,QAAQ,aAEnB,OAAdF,GACFC,aAAaG,QAAQ,YAAa,MAGlB,OAAdD,GACFF,aAAaG,QAAQ,YAAa,K,CAItCC,GACAzC,SAAS0C,iBAAiB,oBAtF1B,WACE,KAvBKxC,iBACL,MAAMG,QAAYC,MAChB,GAAGf,EAAAoD,uCAAuC/C,cAAgBF,UAAiBkD,QAG7E,aADmBvC,EAAIE,M,EAoBrBsC,GAAgBC,MAAKC,IACnB5B,EAAY4B,EAAIC,SAAS,EAAK,G,CAEhC,MAAOhC,GACPC,QAAQC,IAAIF,E,sICzCT,MAAMiC,EAAW,+BAGXC,EAAS,CAClBpD,OAAQ,CACJH,IAJQ,mCAKRwD,MAAO,GACPC,eAAe,EACf3D,SAAU,QACV4D,qBAAsB,GACtBT,KAAM,EACNU,OAAQ,GACRvB,KAAM,I","sources":["src/index.js","src/themoviedb-api.js"],"sourcesContent":["import { BASE_URL, params } from './themoviedb-api.js';\nconst { language, key } = params.option;\n\nexport const movieGalleryEl = document.querySelector('.movie-list');\n\nasync function fetchGenres() {\n  const res = await fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${key}`\n  );\n  const data = await res.json();\n  return data.genres;\n}\n\nexport async function fetchTrending() {\n  const res = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${key}&language=${language}&page=${page}`\n  );\n  const data = await res.json();\n  return data;\n}\n\nasync function getGenres(genre_ids) {\n  try {\n    let allGenres = await fetchGenres();\n    // console.log(allGenres);\n    let matchingGenres = allGenres\n      .filter(genre => genre_ids.includes(genre.id))\n      .map(genre => genre.name);\n    return matchingGenres;\n    //['Drama', 'History']\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction displayMovies() {\n  try {\n    fetchTrending().then(val => {\n      createCards(val.results, true);\n    });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function createCards(movies, boolean) {\n  movies\n    .map(\n      async ({\n        id,\n        popularity,\n        poster_path,\n        original_title,\n        title,\n        release_date,\n        overview,\n        genre_ids,\n        vote_average,\n        vote_count,\n      }) => {\n        let moviesEl = \"\";\n        if (boolean === true) {\n          let genres = await getGenres(genre_ids);\n          let year = release_date.split('-');\n\n          moviesEl = `\n                  <li class=\"movie-item\" data-id=${id}>\n                      <a href=\"https://image.tmdb.org/t/p/w500/${poster_path}\" class=\"movie-link\">\n                          <div class=\"movie-card\" data-popularity=${popularity.toFixed(1)}>\n                              <img src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"${overview}\">\n                              <div class=\"movie-details-wrapper\">\n                                  <p class=\"movie-title\" data-title=\"${original_title}\">${title}</p>\n                                  <div class=\"movie-details\">\n                                    <p data-genre=\"${genres.join(\", \")}\">${genres.join(\", \")} | <span data-year=\"${year[0]}\">${year[0]}</span>\n                                    </p>\n                                    <p class=\"movie-rating\" data-count=\"${vote_count}\">${vote_average.toFixed(1)}</p>\n                                  </div>\n                              </div>\n                          </div>\n                      </a>\n                  </li>\n              `;\n        } else {\n          moviesEl = `\n                  <li class=\"movie-item\" data-id=${id}>\n                      <a href=\"https://image.tmdb.org/t/p/w500/${poster_path}\" class=\"movie-link\">\n                          <div class=\"movie-card\" data-popularity=${popularity}>\n                              <img src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"${overview}\">\n                              <div class=\"movie-details-wrapper\">\n                                  <p class=\"movie-title\" data-title=\"${original_title}\">${title}</p>\n                                  <div class=\"movie-details\">\n                                    <p>${genre_ids} | <span data-year=\"${release_date}\">${release_date}</span>\n                                    </p>\n                                    <p class=\"movie-rating\" data-count=\"${vote_count}\">${vote_average}</p>\n                                  </div>\n                              </div>\n                          </div>\n                      </a>\n                  </li>\n              `;\n            }\n          movieGalleryEl.insertAdjacentHTML('afterbegin', moviesEl);\n      }\n    )\n    .join('');\n}\n\nfunction localSetter() {\n  let watchlist = localStorage.getItem(\"watchList\");\n  let queuelist = localStorage.getItem(\"queueList\");\n  \n  if (watchlist === null) {\n    localStorage.setItem(\"watchList\", \"[]\");\n    \n  }\n  if (queuelist === null) {\n    localStorage.setItem(\"queueList\", \"[]\");    \n  }\n}\n\nlocalSetter();\ndocument.addEventListener('DOMContentLoaded', displayMovies);\n","export const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"334986b59c344f376defb99ce94fed26\";\n\nexport const params = {\n    option: {\n        key: API_KEY,\n        query: \"\",\n        include_adult: false,\n        language: \"en-US\",\n        primary_release_year: \"\",\n        page: 1,\n        region: \"\",\n        year: \"\",\n    }\n}\n\n"],"names":["$9hI1i","parcelRequire","language","$1f0dc3b9307be026$var$language","key","$1f0dc3b9307be026$var$key","params","option","$1f0dc3b9307be026$export$9b265f73751dc3d0","document","querySelector","async","$1f0dc3b9307be026$var$getGenres","genre_ids","res","fetch","json","genres","$1f0dc3b9307be026$var$fetchGenres","filter","genre","includes","id","map","name","e","console","log","$1f0dc3b9307be026$export$659b6b545718ce73","movies","boolean","popularity","poster_path","original_title","title","release_date","overview","vote_average","vote_count","moviesEl","year","split","toFixed","join","insertAdjacentHTML","watchlist","localStorage","getItem","queuelist","setItem","$1f0dc3b9307be026$var$localSetter","addEventListener","BASE_URL","page","$1f0dc3b9307be026$export$366c886a9138e8db","then","val","results","$6c27d9004ed79223$export$ca6dda5263526f75","$6c27d9004ed79223$export$281ad3752a540efe","query","include_adult","primary_release_year","region"],"version":3,"file":"index.db484e53.js.map"}