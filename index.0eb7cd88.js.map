{"mappings":"6rBAAO,MAAMA,EAAW,+BAGXC,EAAS,CAClBC,OAAQ,CACJC,IAJQ,mCAKRC,MAAO,GACPC,eAAe,EACfC,SAAU,QACVC,qBAAsB,GACtBC,KAAM,EACNC,OAAQ,GACRC,KAAM,I,ICZd,IAAAC,EAAAC,EAAA,SACA,MAAMN,SAAEO,EAAQV,IAAEW,GAAQH,EAAAI,OAAOb,OAE3Bc,EAAiBC,SAASC,cAAc,eAmB9CC,eAAeC,EAAUC,GACvB,IAME,aAxBJF,iBACE,MAAMG,QAAYC,MAChB,yDAAyDT,KAG3D,aADmBQ,EAAIE,QACXC,M,CAcYC,IAGnBC,QAAOC,GAASP,EAAUQ,SAASD,EAAME,MACzCC,KAAIH,GAASA,EAAMI,M,CAGtB,MAAOC,GACPC,QAAQC,IAAIF,E,GAoDhB,WACE,IAAIG,EAAYC,aAAaC,QAAQ,aACjCC,EAAYF,aAAaC,QAAQ,aAEnB,OAAdF,GAA2C,IAArBA,EAAUI,QAClCH,aAAaI,QAAQ,YAAa,MAGlB,OAAdF,GAA2C,IAArBH,EAAUI,QAClCH,aAAaI,QAAQ,YAAa,K,CAItCC,GACAzB,SAAS0B,iBAAiB,oBA9D1B,WACE,KAvBFxB,iBACE,MAAMG,QAAYC,MAChB,GAAGZ,EAAAiC,uCAAuC9B,cAAgBD,KAG5D,aADmBS,EAAIE,M,EAoBrBqB,GAAgBC,MAAKC,IACPA,EAAIC,QASjBjB,KACCZ,OAAOW,GACLA,EAAEmB,WACFA,EAAUC,YACVA,EAAWC,eACXA,EAAcC,MACdA,EAAKC,aACLA,EAAYC,SACZA,EAAQjC,UACRA,EAASkC,aACTA,EAAYC,WACZA,MAEA,IAAI/B,QAAeL,EAAUC,GACzBX,EAAO2C,EAAaI,MAAM,KAC1BC,EAAW,oDAC0B5B,oEACcoB,2FACGD,EAAWU,QAAQ,8EACbT,WAAqBI,oIAExBH,MAAmBC,gDAChD3B,EAAOM,KAAIH,GAAS,IAAIA,kEACblB,EAAK,SAASA,EAAK,6DACrB8C,MAAeD,EAAaI,QAAQ,4IAM7E3C,EAAe4C,mBAAmB,aAAcF,EAAS,IAG5DG,KAAK,GA1CoB,G,CAE1B,MAAO5B,GACPC,QAAQC,IAAIF,E","sources":["src/themoviedb-api.js","src/index.js"],"sourcesContent":["export const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"334986b59c344f376defb99ce94fed26\";\n\nexport const params = {\n    option: {\n        key: API_KEY,\n        query: \"\",\n        include_adult: false,\n        language: \"en-US\",\n        primary_release_year: \"\",\n        page: 1,\n        region: \"\",\n        year: \"\",\n    }\n}\n\n","import { BASE_URL, params } from './themoviedb-api.js';\nconst { language, key } = params.option;\n\nconst movieGalleryEl = document.querySelector('.movie-list');\n\nasync function fetchGenres() {\n  const res = await fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${key}`\n  );\n  const data = await res.json();\n  return data.genres;\n  //{genres: [{}, {}]}\n}\n\nasync function fetchTrending() {\n  const res = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${key}&language=${language}`\n  );\n  const data = await res.json();\n  return data;\n}\n\nasync function getGenres(genre_ids) {\n  try {\n    let allGenres = await fetchGenres();\n    // console.log(allGenres);\n    let matchingGenres = allGenres\n      .filter(genre => genre_ids.includes(genre.id))\n      .map(genre => genre.name);\n    return matchingGenres;\n    //['Drama', 'History']\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction displayMovies() {\n  try {\n    fetchTrending().then(val => {\n      createCards(val.results);\n    });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function createCards(movies) {\n  movies\n    .map(\n      async ({\n        id,\n        popularity,\n        poster_path,\n        original_title,\n        title,\n        release_date,\n        overview,\n        genre_ids,\n        vote_average,\n        vote_count,\n      }) => {\n        let genres = await getGenres(genre_ids);\n        let year = release_date.split('-');\n        let moviesEl = `\n                <li class=\"movie-item\" data-id=${id}>\n                    <a href=\"https://image.tmdb.org/t/p/w500/${poster_path}\" class=\"movie-link\">\n                        <div class=\"movie-card\" data-popularity=${popularity.toFixed(1)}>\n                            <img src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"${overview}\">\n                            <div class=\"movie-details\">\n                                <p class=\"movie-title\" data-title=\"${original_title}\">${title}</p>\n                                <span>${genres.map(genre => ` ${genre}`)}</span>\n                                <span data-year=\"${year[0]}\">| ${year[0]}</span>\n                                <p data-count=\"${vote_count}\">${vote_average.toFixed(1)}</p>\n                            </div>\n                        </div>\n                    </a>\n                </li>\n            `;\n        movieGalleryEl.insertAdjacentHTML('afterbegin', moviesEl);\n      }\n    )\n    .join('');\n}\n\nfunction localSetter() {\n  let watchlist = localStorage.getItem(\"watchList\");\n  let queuelist = localStorage.getItem(\"queueList\");\n  \n  if (watchlist === null || watchlist.length === 0) {\n    localStorage.setItem(\"watchList\", \"[]\");\n    \n  }\n  if (queuelist === null || watchlist.length === 0) {\n    localStorage.setItem(\"queueList\", \"[]\");    \n  }\n}\n\nlocalSetter();\ndocument.addEventListener('DOMContentLoaded', displayMovies);\n"],"names":["$6c27d9004ed79223$export$ca6dda5263526f75","$6c27d9004ed79223$export$281ad3752a540efe","option","key","query","include_adult","language","primary_release_year","page","region","year","$9hI1i","parcelRequire","$1f0dc3b9307be026$var$language","$1f0dc3b9307be026$var$key","params","$1f0dc3b9307be026$var$movieGalleryEl","document","querySelector","async","$1f0dc3b9307be026$var$getGenres","genre_ids","res","fetch","json","genres","$1f0dc3b9307be026$var$fetchGenres","filter","genre","includes","id","map","name","e","console","log","watchlist","localStorage","getItem","queuelist","length","setItem","$1f0dc3b9307be026$var$localSetter","addEventListener","BASE_URL","$1f0dc3b9307be026$var$fetchTrending","then","val","results","popularity","poster_path","original_title","title","release_date","overview","vote_average","vote_count","split","moviesEl","toFixed","insertAdjacentHTML","join"],"version":3,"file":"index.0eb7cd88.js.map"}